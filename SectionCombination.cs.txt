using System;
using System.Collections.Generic;
using System.Linq;

namespace temp
{
    class SectionCombinations
    {
        //This is the lower comibnations
        
        /// <summary>
        /// Whoa check it out /// 3 times makes this!
        /// Anyways using the upperseciton thing from wikiepida, this is the result
        /// This is the sum of the dicew with teh same value    
        /// However, in the scenario that the score is over 63, give an additional 35 points.
        /// </summary>
        /// <param name="Arr">This is supposed to repersent the dice</param>
        /// <param name="Val">This is to repersent the dice you want to use. So if Arr is {1,2,1,2,3,4} and Val is 2, you want the sum of all 2</param>
        /// <returns>A score of the times Val appears Arr, multiple by Val</returns>
        public static int UpperSection(int[] Arr, int Val)
        {
            int count = 0;
            if(Arr.Length>5 || Arr.Length<0)
                Console.WriteLine("Zaki/Muaz bro how the hell did you do it, there shouldn't be more/less than 5 dice here!");
            if(Val>6 || Val<1)
                Console.WriteLine("Zaki/Muaz bro how the hell did you do it,the value for input is invalid");
            for (int i = 0; i < Arr.Length; i++)
            {
                if (Arr[i] == Val)
                    count++;
            }
            int Score= count * Val;
            if (Score >= 63)
                return Score + 35;
            return Score;

        }

        /// <summary>
        /// This is the lower section, which is poker themed one.
        /// This is alot tricker to code, due to the dependence of the souranding dice
        /// Not only thta, but they use all dice in the field. 
        /// I think so far, to sort it, so for Small/Large Straight, which requires sequencial order, which will be easier to code
        /// The other ones, like Three/Four of a kind and full house, is a case by case basis.
        /// ALSO IDK HOW TO GET ENUM WORKING so use this shitty int one.
        /// </summary>
        /// <param name="Arr">The dice array</param>
        /// <param name="Comb">This repersents which lower combiatnoin to use.</param>
        /// <returns>If a combiation exist for the seciton, like three of a kind, return a natural (or interger greater than 0), else return 0
        /// the 0 is used to indciate this combaitnion is not selectable.</returns>
        public static int LowerSection(int[] Arr, int Comb)
        {
            Array.Sort(Arr);
            int count=0;
            int temp = 0;
            switch(Comb)
            {
                //Three of a kind: Three  dice are the same
                //You add the sum of all diec.
                case 1:
                    for (int i = 0; i < Arr.Length; i++)
                    {
                        // Check if 3 of a kind is there
                        // If return the sum of the array.
                        if (count == 3)
                        {
                            int sum = 0;
                            Array.ForEach(Arr, delegate (int i) { sum += i; });
                            return sum;

                        }
                        if (Arr[i] == temp)
                        {
                            count++;
                        }
                        else
                        {
                            count = 0;
                        }
                    }
                    
                    break;

                case 2:
                    for (int i = 0; i < Arr.Length; i++)
                    {
                        // Check if 4 of a kind is there
                        // If return the sum of the array.
                        if (count == 4)
                        {
                            int sum = 0;
                            Array.ForEach(Arr, delegate (int i) { sum += i; });
                            return sum;

                        }
                        if (Arr[i] == temp)
                        {
                            count++;
                        }
                        else
                        {
                            count = 0;
                        }
                    }
                    break;

                case 3:
                    // This one is tricky. It's fulll house, which means you have to count 3 of one number, and 2 of another
                    // So for
                    if (Arr.Distinct().Count() == 2)
                        return 25;
                    break;


                case 4:
                     temp = Arr[0];
                    count = 0;
                    // THis is the tricky part: You have to count the sequence.
                    for(int i=0; i<Arr.Length; i++)
                    {
                        if(count == 3)
                        {
                            return 30;
                        }
                        if (temp == Arr[i])
                        {
                            temp++;
                            count++;
                        }
                        else
                        {
                            temp = Arr[i]+1;

                            count = 1;
                        }

                    }
                    break;

                case 5:
                     temp = Arr[0];
                    count = 0;
                    // THis is the tricky part: You have to count the sequence.
                    for(int i=0; i<Arr.Length; i++)
                    {
                        if(count == 4)
                        {
                            return 40;
                        }
                        if (temp == Arr[i])
                        {
                            temp++;
                            count++;
                        }
                        else
                        {
                            temp = Arr[i]+1;

                            count = 1;
                        }

                    }
                    break;

                case 6:
                    // This is yathzee, which means all 5 die are the same.
                    if (Arr.Distinct().Count() == 1)
                        return 50;
                    break;
                    //This is chance, which is the sum of all dice
                case 7:
                    return Arr.Sum();
                    break;
            }


        return 0;
        }
        
    }
    class Program
    {
        static void Main(string[] args)
        {
            int[] Arr = { 1,2,3,4,5};
            Console.WriteLine(SectionCombinations.LowerSection(Arr, 6));
            int[] ArrJ = { 1,1,1,1,1};
            Console.WriteLine(SectionCombinations.LowerSection(ArrJ, 6));
            Console.WriteLine(SectionCombinations.LowerSection(ArrJ, 7));

        }
    }
}

